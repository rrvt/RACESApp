<!doctype html>
<html><!-- InstanceBegin template="/Templates/OneColumnPage.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<meta charset="utf-8">
<!-- InstanceBeginEditable name="doctitle" -->
<title>RACES App Introduction</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
<!-- InstanceEndEditable -->
<link href="App.css" rel="stylesheet" type="text/css">
</head>

<body>

<div class="container">
<div class="content">
<!-- InstanceBeginEditable name="Title" -->
<h1>RACES App</h1>
<!-- InstanceEndEditable -->

<!-- InstanceBeginEditable name="Body" -->
<h2>Introduction</h2>
<p>
Over the years I've updated the Radio Amateur Civil Emergency Service data base maintained in Microsoft Access and
programmed in MS Basic.  I was discouraged with the limitations on MS Basic and Access.  The Chief Radio Operators 
asked for various reports from the data and I found a way to produce those using a MFC/c++ application.  This is a 
consolidation of the user interface and reports and anything else that I can think of.
</p>
<p>
The application window is a dialog box which contains an edit or combo box for each field in the database.  It also has
check boxes for some true/false items.  The entites in the dialog box represent exactly one member.  The app starts with
the user interface allows changes to be made in the dialog box, however, the interface starts in a mode that does not
allow any changes to be made in the database file.  It is easily changed by selecting the Editable (pencil icon) command on
the toolbar or menu.
</p>
<p>
The Access database is made up of four principal tables:  Member, Entity, Address, and CityState.  There are two additional
tables that specify their ability to respond to an emergency.  The database is divided into two sets:  Current Member and
Former Member.  The Member Table contains a record for every person in the database.  It contains an Entity Record 
identifier for the member, ICE person (spouse, other family member, friend to call in an emergency), and employer.
An entity record contains an Address record identifier and a CityState record identifier.  This organization allows 
records to be reused or to be not used at all (i.e. no employer). 
</p>
<p>
When the app opens it connects to the last database file and loads the current members into the a drop down list in
the upper left hand corner of the window.  The data for a member is displayed when a member's name and call sign are 
selected in the drop down list.  The status bar at the bottom of the window show the specific set of members (Current, 
Former, and 3 yr Former), the editable status (Read Only, Editable) and the specific path to the database file.
</p>

<p>
The toolbar contains the following commands:
</p>
<ul>
<li>Load database -- Allows user to select and open a new MS Access database file, load the current members into the app.</li>
<li>New Member -- Clears the dialog fields, sets the editable status to allow creating a new member</li>
<li>Load Current Members -- Load the current members into the drop down list</li>
<li>Load Former Members -- Load the former members into the drop down list</li>
<li>Edit Records -- Set the status so that edits to records are stored in the database file</li>
<li>Check List -- Display a dialog box that shows the list of things that needs to be done to a new member</li>
<li>Load Retired members -- Load Former Members that have been former for three years or more</li>
<li>Remove Retired Member -- Remove "Retired" Member's Member Table record</li>
<li>Remove Dead Records -- Remove records whose ID is no longer found in any other record in the database</li>
<li>About -- Display information about the app</li>
<li>Update Database and Exit -- When changes in records have been saved, update the database if user confirms, then exit</li>
<li>Display Previous Record -- Saves any changes in current displayed record and load the previous record in the current list</li>
<li>Find Record -- Uses a dialog box to specify the target string and attributes of the search</li>
<li>Find Next Record -- Uses the target string and attributes to find the next record</li>
<li>Display Next Record -- Saves any changes in current displayed record and load the next record in the current list</li>
<li>Reports -- Pop up a Menu of Reports, each report asks for a file name (a default name being supplied) then the report is generated from the appropriate subset of the master list and stored</li>
<ul>
<li>Excel CSV Report -- Outputs the full record for each member in the current member list</li>
<li>Google Earth Report -- Outputs each record in the current member list suitable for Google Earch</li>
<li>Everbridge Report -- Outputs each record in the current member list suitable for Everbridge</li>
<li>Badges by Call Sign -- List of badges and expiration dates sorted by call sign</li>
<li>Badges by Date -- List of badges and expiration dates sorted by expiration date</li>
<li>Contact List by Name -- Call sign, name, phone, eMail list sorted by name</li>
<li>Contact List by Call Sign -- Call sign, name, phone, eMail list sorted by call sign</li>
<li>Responder Counts by Attribute -- Number of Responders separated by responder attributes</li>
<li>Call Sign List -- Call signs only sorted</li>
<li>Member IDs by Call Sign -- Call sign and name sorted by call sign</li>
<li>Member IDs by Suffix -- Call sign and name sorted by call sign suffix</li>
<li>Former Members -- Outputs the full record for each former member contained in the database.</li>
</ul>
</ul>







<!-- InstanceEndEditable -->
</div><!-- end .content -->
</div><!-- end .container -->
</body>
<!-- InstanceEnd --></html>
